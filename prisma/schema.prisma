// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String       @unique
  passwordHash String?      @map("password_hash")
  firstName    String       @map("first_name")
  lastName     String       @map("last_name")
  guestProfile Guest?
  connections  Connection[]

  @@map("users")
}

enum SceneCollection {
  ME  @map("me")
  CRL @map("crl")

  @@map("scene_collections")
}

model Show {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String
  description     String?
  sceneCollection SceneCollection @map("scene_collection")
  episodes        Episode[]
  archived        Boolean         @default(false)

  @@map("shows")
}

model Episode {
  id          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  showId      String             @db.Uuid
  startDate   DateTime           @map("start_date") @db.Timestamptz(0)
  endDate     DateTime           @map("end_date") @db.Timestamptz(0)
  title       String
  subtitle    String?
  description String
  vdoPassword String             @default("its@ydrianB1ch") @map("vdo_password")
  createdAt   DateTime           @default(now()) @map("created_at") @db.Timestamptz(0)
  show        Show               @relation(fields: [showId], references: [id])
  guests      GuestsForEpisode[]

  @@map("episodes")
}

model Guest {
  id        String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName String             @map("first_name")
  lastName  String             @map("last_name")
  title     String?
  company   String?
  twitter   String?
  avatarUrl String?            @map("avatarUrl")
  episodes  GuestsForEpisode[]
  userId    String?            @unique @map("user_id") @db.Uuid
  user      User?              @relation(fields: [userId], references: [id])

  @@map("guests")
}

model GuestsForEpisode {
  episodeId String  @db.Uuid
  guestId   String  @db.Uuid
  order     Int     @db.Int4
  episode   Episode @relation(fields: [episodeId], references: [id])
  guest     Guest   @relation(fields: [guestId], references: [id])

  @@id([episodeId, guestId])
  @@map("guests_episodes")
}

model Connection {
  id                  String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String  @db.Uuid
  type                String
  provider            String
  providerAccountId   String  @map("provider_account_id")
  providerDisplayName String? @map("provider_display_name")
  refreshToken        String? @map("refresh_token")
  accessToken         String? @map("access_token")
  expiresAt           Int?    @map("expires_at")
  tokenType           String? @map("token_type")
  scope               String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("connections")
}
